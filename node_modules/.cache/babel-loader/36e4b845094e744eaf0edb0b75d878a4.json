{"ast":null,"code":"var _jsxFileName = \"/Users/gela/Downloads/Gym dashboard analytics/src/components/Table/Table.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport Modal from \"@mui/material/Modal\";\nimport \"./Table.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst makeStyle = status => {\n  if (status === \"Approved\") {\n    return {\n      background: \"rgb(145 254 159 / 47%)\",\n      color: \"green\"\n    };\n  } else if (status === \"Pending\") {\n    return {\n      background: \"#ffadad8f\",\n      color: \"red\"\n    };\n  } else {\n    return {\n      background: \"#59bfff\",\n      color: \"white\"\n    };\n  }\n};\n\nconst BasicTable = _ref => {\n  _s();\n\n  let {\n    handleUpdateOrder,\n    handleDeleteOrder\n  } = _ref;\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [modalOpen, setModalOpen] = useState(false);\n  const [newImageUrl, setNewImageUrl] = useState(\"\");\n  const [file, setFile] = useState(null);\n  const [description, setDescription] = useState(\"\");\n  const [rows, setRows] = useState([{\n    name: \"Dumbbells\",\n    trackingId: 12345,\n    date: \"2024-05-26\",\n    status: \"Approved\",\n    imageUrl: \"dumbbellImage\"\n  }, {\n    name: \"Gym Bar\",\n    trackingId: 67890,\n    date: \"2024-05-25\",\n    status: \"Pending\",\n    imageUrl: \"barImage\"\n  }]);\n  const [creationModalOpen, setCreationModalOpen] = useState(false);\n  const [newProductName, setNewProductName] = useState(\"\");\n  const [newProductImage, setNewProductImage] = useState(\"\");\n  const [newProductDescription, setNewProductDescription] = useState(\"\");\n\n  const handleRowClick = (name, imageUrl) => {\n    setSelectedRow(name);\n    setImageUrl(imageUrl);\n    setNewImageUrl(\"\");\n    setDescription(descriptions[name]);\n    setModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setModalOpen(false);\n\n    if (file && newImageUrl) {\n      handleUpdate();\n    }\n  };\n\n  const handleCreateOrder = () => {\n    const newOrder = {\n      name: newProductName,\n      trackingId: Math.floor(Math.random() * 100000),\n      date: new Date().toISOString().split(\"T\")[0],\n      status: \"Pending\",\n      imageUrl: newProductImage\n    };\n    setRows([...rows, newOrder]);\n    setNewProductName(\"\");\n    setNewProductImage(\"\");\n    setNewProductDescription(\"\");\n    setCreationModalOpen(false);\n  };\n\n  const handleUpdate = () => {\n    if (file) {\n      const updatedRows = rows.map(row => {\n        if (row.name === selectedRow) {\n          return { ...row,\n            imageUrl: newImageUrl || imageUrl,\n            description: description\n          };\n        }\n\n        return row;\n      });\n      setRows(updatedRows);\n      console.log(\"Image updated:\", newImageUrl || imageUrl); // Log the updated image URL\n\n      setFile(null); // Reset file state\n\n      setNewImageUrl(\"\"); // Reset new image URL\n\n      setDescription(\"\"); // Reset description\n\n      setModalOpen(false); // Close the modal after updating\n    } else {\n      // Prompt user to select a file\n      const input = document.createElement(\"input\");\n      input.type = \"file\";\n      input.accept = \"image/*\";\n\n      input.onchange = e => {\n        const selectedFile = e.target.files[0];\n        const reader = new FileReader();\n\n        reader.onload = e => {\n          setNewImageUrl(e.target.result);\n          setFile(selectedFile);\n        };\n\n        reader.readAsDataURL(selectedFile);\n      };\n\n      input.click();\n    }\n  };\n\n  const handleDelete = () => {\n    if (selectedRow) {\n      const updatedRows = rows.filter(row => row.name !== selectedRow);\n      console.log(\"Deleted:\", selectedRow); // Log the deleted row\n\n      setRows(updatedRows);\n      setSelectedRow(null);\n      setModalOpen(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Table\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Recent Gym Orders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCreationModalOpen(true),\n      children: \"Create New Order\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      style: {\n        boxShadow: \"0px 13px 20px 0px #80808029\",\n        maxHeight: \"400px\",\n        overflowY: \"scroll\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        sx: {\n          minWidth: 650\n        },\n        \"aria-label\": \"simple table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Product\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"left\",\n              children: \"Tracking ID\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"left\",\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"left\",\n              children: \"Status\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          style: {\n            color: \"white\"\n          },\n          children: rows.map(row => /*#__PURE__*/_jsxDEV(TableRow, {\n            sx: {\n              \"&:last-child td, &:last-child th\": {\n                border: 0\n              },\n              cursor: \"pointer\",\n              backgroundColor: selectedRow === row.name ? \"lightgray\" : \"inherit\"\n            },\n            onClick: () => handleRowClick(row.name, row.imageUrl),\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              component: \"th\",\n              scope: \"row\",\n              children: row.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"left\",\n              children: row.trackingId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"left\",\n              children: row.date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"left\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"status\",\n                style: makeStyle(row.status),\n                children: row.status\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 17\n            }, this)]\n          }, row.name, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: modalOpen,\n      onClose: handleCloseModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: creationModalOpen,\n      onClose: () => setCreationModalOpen(false),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Modal\",\n        style: {\n          textAlign: \"center\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Create New Order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Product Name\",\n          value: newProductName,\n          onChange: e => setNewProductName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Product Image URL\",\n          value: newProductImage,\n          onChange: e => setNewProductImage(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Product Description\",\n          value: newProductDescription,\n          onChange: e => setNewProductDescription(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCreateOrder,\n          children: \"Create\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BasicTable, \"OTKJW17YVyh71gDkSAuiP9UfKl4=\");\n\n_c = BasicTable;\nexport default BasicTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"BasicTable\");","map":{"version":3,"sources":["/Users/gela/Downloads/Gym dashboard analytics/src/components/Table/Table.jsx"],"names":["React","useState","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Modal","makeStyle","status","background","color","BasicTable","handleUpdateOrder","handleDeleteOrder","selectedRow","setSelectedRow","imageUrl","setImageUrl","modalOpen","setModalOpen","newImageUrl","setNewImageUrl","file","setFile","description","setDescription","rows","setRows","name","trackingId","date","creationModalOpen","setCreationModalOpen","newProductName","setNewProductName","newProductImage","setNewProductImage","newProductDescription","setNewProductDescription","handleRowClick","descriptions","handleCloseModal","handleUpdate","handleCreateOrder","newOrder","Math","floor","random","Date","toISOString","split","updatedRows","map","row","console","log","input","document","createElement","type","accept","onchange","e","selectedFile","target","files","reader","FileReader","onload","result","readAsDataURL","click","handleDelete","filter","boxShadow","maxHeight","overflowY","minWidth","border","cursor","backgroundColor","textAlign","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAO,aAAP;;;AAEA,MAAMC,SAAS,GAAIC,MAAD,IAAY;AAC5B,MAAIA,MAAM,KAAK,UAAf,EAA2B;AACzB,WAAO;AACLC,MAAAA,UAAU,EAAE,wBADP;AAELC,MAAAA,KAAK,EAAE;AAFF,KAAP;AAID,GALD,MAKO,IAAIF,MAAM,KAAK,SAAf,EAA0B;AAC/B,WAAO;AACLC,MAAAA,UAAU,EAAE,WADP;AAELC,MAAAA,KAAK,EAAE;AAFF,KAAP;AAID,GALM,MAKA;AACL,WAAO;AACLD,MAAAA,UAAU,EAAE,SADP;AAELC,MAAAA,KAAK,EAAE;AAFF,KAAP;AAID;AACF,CAjBD;;AAmBA,MAAMC,UAAU,GAAG,QAA8C;AAAA;;AAAA,MAA7C;AAAEC,IAAAA,iBAAF;AAAqBC,IAAAA;AAArB,GAA6C;AAC/D,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACkB,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACoB,SAAD,EAAYC,YAAZ,IAA4BrB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACsB,WAAD,EAAcC,cAAd,IAAgCvB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACwB,IAAD,EAAOC,OAAP,IAAkBzB,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAAC0B,WAAD,EAAcC,cAAd,IAAgC3B,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAAC4B,IAAD,EAAOC,OAAP,IAAkB7B,QAAQ,CAAC,CAC/B;AACE8B,IAAAA,IAAI,EAAE,WADR;AAEEC,IAAAA,UAAU,EAAE,KAFd;AAGEC,IAAAA,IAAI,EAAE,YAHR;AAIEtB,IAAAA,MAAM,EAAE,UAJV;AAKEQ,IAAAA,QAAQ,EAAE;AALZ,GAD+B,EAQ/B;AACEY,IAAAA,IAAI,EAAE,SADR;AAEEC,IAAAA,UAAU,EAAE,KAFd;AAGEC,IAAAA,IAAI,EAAE,YAHR;AAIEtB,IAAAA,MAAM,EAAE,SAJV;AAKEQ,IAAAA,QAAQ,EAAE;AALZ,GAR+B,CAAD,CAAhC;AAiBA,QAAM,CAACe,iBAAD,EAAoBC,oBAApB,IAA4ClC,QAAQ,CAAC,KAAD,CAA1D;AACA,QAAM,CAACmC,cAAD,EAAiBC,iBAAjB,IAAsCpC,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACqC,eAAD,EAAkBC,kBAAlB,IAAwCtC,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACuC,qBAAD,EAAwBC,wBAAxB,IAAoDxC,QAAQ,CAAC,EAAD,CAAlE;;AAEA,QAAMyC,cAAc,GAAG,CAACX,IAAD,EAAOZ,QAAP,KAAoB;AACzCD,IAAAA,cAAc,CAACa,IAAD,CAAd;AACAX,IAAAA,WAAW,CAACD,QAAD,CAAX;AACAK,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAI,IAAAA,cAAc,CAACe,YAAY,CAACZ,IAAD,CAAb,CAAd;AACAT,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAND;;AAQA,QAAMsB,gBAAgB,GAAG,MAAM;AAC7BtB,IAAAA,YAAY,CAAC,KAAD,CAAZ;;AACA,QAAIG,IAAI,IAAIF,WAAZ,EAAyB;AACvBsB,MAAAA,YAAY;AACb;AACF,GALD;;AAOA,QAAMC,iBAAiB,GAAG,MAAM;AAC9B,UAAMC,QAAQ,GAAG;AACfhB,MAAAA,IAAI,EAAEK,cADS;AAEfJ,MAAAA,UAAU,EAAEgB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,MAA3B,CAFG;AAGfjB,MAAAA,IAAI,EAAE,IAAIkB,IAAJ,GAAWC,WAAX,GAAyBC,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,CAHS;AAIf1C,MAAAA,MAAM,EAAE,SAJO;AAKfQ,MAAAA,QAAQ,EAAEmB;AALK,KAAjB;AAOAR,IAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAUkB,QAAV,CAAD,CAAP;AAEAV,IAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACAE,IAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACAE,IAAAA,wBAAwB,CAAC,EAAD,CAAxB;AACAN,IAAAA,oBAAoB,CAAC,KAAD,CAApB;AACD,GAdD;;AAgBA,QAAMU,YAAY,GAAG,MAAM;AACzB,QAAIpB,IAAJ,EAAU;AACR,YAAM6B,WAAW,GAAGzB,IAAI,CAAC0B,GAAL,CAAUC,GAAD,IAAS;AACpC,YAAIA,GAAG,CAACzB,IAAJ,KAAad,WAAjB,EAA8B;AAC5B,iBAAO,EACL,GAAGuC,GADE;AAELrC,YAAAA,QAAQ,EAAEI,WAAW,IAAIJ,QAFpB;AAGLQ,YAAAA,WAAW,EAAEA;AAHR,WAAP;AAKD;;AACD,eAAO6B,GAAP;AACD,OATmB,CAApB;AAUA1B,MAAAA,OAAO,CAACwB,WAAD,CAAP;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BnC,WAAW,IAAIJ,QAA7C,EAZQ,CAYgD;;AACxDO,MAAAA,OAAO,CAAC,IAAD,CAAP,CAbQ,CAaO;;AACfF,MAAAA,cAAc,CAAC,EAAD,CAAd,CAdQ,CAcY;;AACpBI,MAAAA,cAAc,CAAC,EAAD,CAAd,CAfQ,CAeY;;AACpBN,MAAAA,YAAY,CAAC,KAAD,CAAZ,CAhBQ,CAgBa;AACtB,KAjBD,MAiBO;AACL;AACA,YAAMqC,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AACAF,MAAAA,KAAK,CAACG,IAAN,GAAa,MAAb;AACAH,MAAAA,KAAK,CAACI,MAAN,GAAe,SAAf;;AACAJ,MAAAA,KAAK,CAACK,QAAN,GAAkBC,CAAD,IAAO;AACtB,cAAMC,YAAY,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAT,CAAe,CAAf,CAArB;AACA,cAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,QAAAA,MAAM,CAACE,MAAP,GAAiBN,CAAD,IAAO;AACrBzC,UAAAA,cAAc,CAACyC,CAAC,CAACE,MAAF,CAASK,MAAV,CAAd;AACA9C,UAAAA,OAAO,CAACwC,YAAD,CAAP;AACD,SAHD;;AAIAG,QAAAA,MAAM,CAACI,aAAP,CAAqBP,YAArB;AACD,OARD;;AASAP,MAAAA,KAAK,CAACe,KAAN;AACD;AACF,GAlCD;;AAoCA,QAAMC,YAAY,GAAG,MAAM;AACzB,QAAI1D,WAAJ,EAAiB;AACf,YAAMqC,WAAW,GAAGzB,IAAI,CAAC+C,MAAL,CAAapB,GAAD,IAASA,GAAG,CAACzB,IAAJ,KAAad,WAAlC,CAApB;AACAwC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBzC,WAAxB,EAFe,CAEuB;;AACtCa,MAAAA,OAAO,CAACwB,WAAD,CAAP;AACApC,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAI,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GARD;;AAUA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAE,MAAMa,oBAAoB,CAAC,IAAD,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAKE,QAAC,cAAD;AACE,MAAA,SAAS,EAAE3B,KADb;AAEE,MAAA,KAAK,EAAE;AACLqE,QAAAA,SAAS,EAAE,6BADN;AAELC,QAAAA,SAAS,EAAE,OAFN;AAGLC,QAAAA,SAAS,EAAE;AAHN,OAFT;AAAA,6BAQE,QAAC,KAAD;AAAO,QAAA,EAAE,EAAE;AAAEC,UAAAA,QAAQ,EAAE;AAAZ,SAAX;AAA8B,sBAAW,cAAzC;AAAA,gCACE,QAAC,SAAD;AAAA,iCACE,QAAC,QAAD;AAAA,oCACE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,SAAD;AAAW,cAAA,KAAK,EAAC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE,QAAC,SAAD;AAAW,cAAA,KAAK,EAAC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,eAIE,QAAC,SAAD;AAAW,cAAA,KAAK,EAAC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eASE,QAAC,SAAD;AAAW,UAAA,KAAK,EAAE;AAAEnE,YAAAA,KAAK,EAAE;AAAT,WAAlB;AAAA,oBACGgB,IAAI,CAAC0B,GAAL,CAAUC,GAAD,iBACR,QAAC,QAAD;AAEE,YAAA,EAAE,EAAE;AACF,kDAAoC;AAAEyB,gBAAAA,MAAM,EAAE;AAAV,eADlC;AAEFC,cAAAA,MAAM,EAAE,SAFN;AAGFC,cAAAA,eAAe,EACblE,WAAW,KAAKuC,GAAG,CAACzB,IAApB,GAA2B,WAA3B,GAAyC;AAJzC,aAFN;AAQE,YAAA,OAAO,EAAE,MAAMW,cAAc,CAACc,GAAG,CAACzB,IAAL,EAAWyB,GAAG,CAACrC,QAAf,CAR/B;AAAA,oCAUE,QAAC,SAAD;AAAW,cAAA,SAAS,EAAC,IAArB;AAA0B,cAAA,KAAK,EAAC,KAAhC;AAAA,wBACGqC,GAAG,CAACzB;AADP;AAAA;AAAA;AAAA;AAAA,oBAVF,eAaE,QAAC,SAAD;AAAW,cAAA,KAAK,EAAC,MAAjB;AAAA,wBAAyByB,GAAG,CAACxB;AAA7B;AAAA;AAAA;AAAA;AAAA,oBAbF,eAcE,QAAC,SAAD;AAAW,cAAA,KAAK,EAAC,MAAjB;AAAA,wBAAyBwB,GAAG,CAACvB;AAA7B;AAAA;AAAA;AAAA;AAAA,oBAdF,eAeE,QAAC,SAAD;AAAW,cAAA,KAAK,EAAC,MAAjB;AAAA,qCACE;AAAM,gBAAA,SAAS,EAAC,QAAhB;AAAyB,gBAAA,KAAK,EAAEvB,SAAS,CAAC8C,GAAG,CAAC7C,MAAL,CAAzC;AAAA,0BACG6C,GAAG,CAAC7C;AADP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBAfF;AAAA,aACO6C,GAAG,CAACzB,IADX;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA;AARF;AAAA;AAAA;AAAA;AAAA,YALF,eAiDE,QAAC,KAAD;AAAO,MAAA,IAAI,EAAEV,SAAb;AAAwB,MAAA,OAAO,EAAEuB;AAAjC;AAAA;AAAA;AAAA;AAAA,YAjDF,eAoDE,QAAC,KAAD;AACE,MAAA,IAAI,EAAEV,iBADR;AAEE,MAAA,OAAO,EAAE,MAAMC,oBAAoB,CAAC,KAAD,CAFrC;AAAA,6BAIE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAuB,QAAA,KAAK,EAAE;AAAEiD,UAAAA,SAAS,EAAE;AAAb,SAA9B;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,WAAW,EAAC,cAFd;AAGE,UAAA,KAAK,EAAEhD,cAHT;AAIE,UAAA,QAAQ,EAAG6B,CAAD,IAAO5B,iBAAiB,CAAC4B,CAAC,CAACE,MAAF,CAASkB,KAAV;AAJpC;AAAA;AAAA;AAAA;AAAA,gBAFF,eAQE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,WAAW,EAAC,mBAFd;AAGE,UAAA,KAAK,EAAE/C,eAHT;AAIE,UAAA,QAAQ,EAAG2B,CAAD,IAAO1B,kBAAkB,CAAC0B,CAAC,CAACE,MAAF,CAASkB,KAAV;AAJrC;AAAA;AAAA;AAAA;AAAA,gBARF,eAcE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,WAAW,EAAC,qBAFd;AAGE,UAAA,KAAK,EAAE7C,qBAHT;AAIE,UAAA,QAAQ,EAAGyB,CAAD,IAAOxB,wBAAwB,CAACwB,CAAC,CAACE,MAAF,CAASkB,KAAV;AAJ3C;AAAA;AAAA;AAAA;AAAA,gBAdF,eAoBE;AAAQ,UAAA,OAAO,EAAEvC,iBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBApBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,YApDF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkFD,CA5LD;;GAAMhC,U;;KAAAA,U;AA8LN,eAAeA,UAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport Modal from \"@mui/material/Modal\";\nimport \"./Table.css\";\n\nconst makeStyle = (status) => {\n  if (status === \"Approved\") {\n    return {\n      background: \"rgb(145 254 159 / 47%)\",\n      color: \"green\",\n    };\n  } else if (status === \"Pending\") {\n    return {\n      background: \"#ffadad8f\",\n      color: \"red\",\n    };\n  } else {\n    return {\n      background: \"#59bfff\",\n      color: \"white\",\n    };\n  }\n};\n\nconst BasicTable = ({ handleUpdateOrder, handleDeleteOrder }) => {\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [modalOpen, setModalOpen] = useState(false);\n  const [newImageUrl, setNewImageUrl] = useState(\"\");\n  const [file, setFile] = useState(null);\n  const [description, setDescription] = useState(\"\");\n  const [rows, setRows] = useState([\n    {\n      name: \"Dumbbells\",\n      trackingId: 12345,\n      date: \"2024-05-26\",\n      status: \"Approved\",\n      imageUrl: \"dumbbellImage\",\n    },\n    {\n      name: \"Gym Bar\",\n      trackingId: 67890,\n      date: \"2024-05-25\",\n      status: \"Pending\",\n      imageUrl: \"barImage\",\n    },\n  ]);\n\n  const [creationModalOpen, setCreationModalOpen] = useState(false);\n  const [newProductName, setNewProductName] = useState(\"\");\n  const [newProductImage, setNewProductImage] = useState(\"\");\n  const [newProductDescription, setNewProductDescription] = useState(\"\");\n\n  const handleRowClick = (name, imageUrl) => {\n    setSelectedRow(name);\n    setImageUrl(imageUrl);\n    setNewImageUrl(\"\");\n    setDescription(descriptions[name]);\n    setModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    if (file && newImageUrl) {\n      handleUpdate();\n    }\n  };\n\n  const handleCreateOrder = () => {\n    const newOrder = {\n      name: newProductName,\n      trackingId: Math.floor(Math.random() * 100000),\n      date: new Date().toISOString().split(\"T\")[0],\n      status: \"Pending\",\n      imageUrl: newProductImage,\n    };\n    setRows([...rows, newOrder]);\n\n    setNewProductName(\"\");\n    setNewProductImage(\"\");\n    setNewProductDescription(\"\");\n    setCreationModalOpen(false);\n  };\n\n  const handleUpdate = () => {\n    if (file) {\n      const updatedRows = rows.map((row) => {\n        if (row.name === selectedRow) {\n          return {\n            ...row,\n            imageUrl: newImageUrl || imageUrl,\n            description: description,\n          };\n        }\n        return row;\n      });\n      setRows(updatedRows);\n      console.log(\"Image updated:\", newImageUrl || imageUrl); // Log the updated image URL\n      setFile(null); // Reset file state\n      setNewImageUrl(\"\"); // Reset new image URL\n      setDescription(\"\"); // Reset description\n      setModalOpen(false); // Close the modal after updating\n    } else {\n      // Prompt user to select a file\n      const input = document.createElement(\"input\");\n      input.type = \"file\";\n      input.accept = \"image/*\";\n      input.onchange = (e) => {\n        const selectedFile = e.target.files[0];\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          setNewImageUrl(e.target.result);\n          setFile(selectedFile);\n        };\n        reader.readAsDataURL(selectedFile);\n      };\n      input.click();\n    }\n  };\n\n  const handleDelete = () => {\n    if (selectedRow) {\n      const updatedRows = rows.filter((row) => row.name !== selectedRow);\n      console.log(\"Deleted:\", selectedRow); // Log the deleted row\n      setRows(updatedRows);\n      setSelectedRow(null);\n      setModalOpen(false);\n    }\n  };\n\n  return (\n    <div className=\"Table\">\n      <h3>Recent Gym Orders</h3>\n      <button onClick={() => setCreationModalOpen(true)}>\n        Create New Order\n      </button>\n      <TableContainer\n        component={Paper}\n        style={{\n          boxShadow: \"0px 13px 20px 0px #80808029\",\n          maxHeight: \"400px\",\n          overflowY: \"scroll\",\n        }}\n      >\n        <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Product</TableCell>\n              <TableCell align=\"left\">Tracking ID</TableCell>\n              <TableCell align=\"left\">Date</TableCell>\n              <TableCell align=\"left\">Status</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody style={{ color: \"white\" }}>\n            {rows.map((row) => (\n              <TableRow\n                key={row.name}\n                sx={{\n                  \"&:last-child td, &:last-child th\": { border: 0 },\n                  cursor: \"pointer\",\n                  backgroundColor:\n                    selectedRow === row.name ? \"lightgray\" : \"inherit\",\n                }}\n                onClick={() => handleRowClick(row.name, row.imageUrl)}\n              >\n                <TableCell component=\"th\" scope=\"row\">\n                  {row.name}\n                </TableCell>\n                <TableCell align=\"left\">{row.trackingId}</TableCell>\n                <TableCell align=\"left\">{row.date}</TableCell>\n                <TableCell align=\"left\">\n                  <span className=\"status\" style={makeStyle(row.status)}>\n                    {row.status}\n                  </span>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <Modal open={modalOpen} onClose={handleCloseModal}>\n        {/* Modal content for existing orders */}\n      </Modal>\n      <Modal\n        open={creationModalOpen}\n        onClose={() => setCreationModalOpen(false)}\n      >\n        <div className=\"Modal\" style={{ textAlign: \"center\" }}>\n          <h3>Create New Order</h3>\n          <input\n            type=\"text\"\n            placeholder=\"Product Name\"\n            value={newProductName}\n            onChange={(e) => setNewProductName(e.target.value)}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Product Image URL\"\n            value={newProductImage}\n            onChange={(e) => setNewProductImage(e.target.value)}\n          />\n          <input\n            type=\"text\"\n            placeholder=\"Product Description\"\n            value={newProductDescription}\n            onChange={(e) => setNewProductDescription(e.target.value)}\n          />\n          <button onClick={handleCreateOrder}>Create</button>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default BasicTable;\n"]},"metadata":{},"sourceType":"module"}